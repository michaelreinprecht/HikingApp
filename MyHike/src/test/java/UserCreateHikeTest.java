// Generated by Selenium IDE
import database.Database;
import facade.JPAFacade;
import facade.JPAHikeFacade;
import models.Hike;
import org.junit.Assert;
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;

import java.io.File;
import java.time.Duration;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;

public class UserCreateHikeTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() { driver.quit(); }

  //Tests if a user is able to properly create a hike. For this the user first needs to log in.
  //This test uses images/beispiel_berge.jpg as a fixed image. Also uses our default user account.
  @Test
  public void userCreateHike() {
    //TODO Mock database/fix mocking
    //Mocking database and removing functionality from insert
    JPAFacade mockFacade = mock(JPAFacade.class);
    doNothing().when(mockFacade).insert(any(Object.class));
    Database.facade = mockFacade;
    doNothing().when(Database.facade).insert(any(Object.class));

    Database.hikeFacade = mock(JPAHikeFacade.class);
    doNothing().when(Database.hikeFacade).insert(any(Object.class));

    Actions actions = new Actions(driver);

    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10)); // 10 seconds timeout

    driver.get("http://localhost:8080/MyHike_war_exploded/discover.jsp");
    driver.manage().window().setSize(new Dimension(1936, 1056));
    //Wait a maximum of 10 seconds for the "Create Hike" link to show up.
    wait.until(ExpectedConditions.presenceOfElementLocated(By.linkText("Create Hike")));
    driver.findElement(By.linkText("Create Hike")).click();
    //Wait a maximum of 10 seconds for the dom to be fully loaded.
    wait.until((ExpectedCondition<Boolean>) webDriver ->
            ((JavascriptExecutor) webDriver).executeScript("return document.readyState").equals("complete"));

    //Login as admin
    AdminLoginTest loginTest = new AdminLoginTest();
    loginTest.login(driver, wait);

    driver.findElement(By.linkText("Create Hike")).click();
    //Click on 3 different positions in the map (create one start-, way- and endpoint and initiate routing)
    actions.moveToElement(driver.findElement(By.id("map")), 0, 0).click().perform();
    actions.moveToElement(driver.findElement(By.id("map")), 10, 10).click().perform();
    actions.moveToElement(driver.findElement(By.id("map")), 20, 20).click().perform();
    driver.findElement(By.id("name")).click();
    driver.findElement(By.id("name")).clear();
    driver.findElement(By.id("name")).sendKeys("Selenium Test User");
    driver.findElement(By.id("April")).click();
    driver.findElement(By.id("June")).click();
    driver.findElement(By.id("July")).click();
    driver.findElement(By.cssSelector(".landscape-rating:nth-child(2) path")).click();
    driver.findElement(By.cssSelector(".strength-rating:nth-child(2) > .svg-inline--fa")).click();
    driver.findElement(By.cssSelector(".stamina-rating:nth-child(2) path")).click();
    driver.findElement(By.cssSelector(".difficulty-rating:nth-child(2) path")).click();
    driver.findElement(By.id("description")).click();
    driver.findElement(By.id("description")).clear();
    driver.findElement(By.id("description")).sendKeys("Testing");

    String fixedFilePath = "src/main/webapp/images/beispiel_berge.jpg";
    driver.findElement(By.id("fileToUpload")).sendKeys(new File(fixedFilePath).getAbsolutePath());

    //Wait a maximum of 10 seconds for the route to be returned from the API.
    wait.until(ExpectedConditions.presenceOfElementLocated(By.className("leaflet-interactive")));
    driver.findElement(By.cssSelector(".btn")).click();

    //Wait until the alert window pops up and check if alert is positive about the hike being created.
    wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(".alert")));
    String alertMessage = driver.findElement(By.cssSelector(".alert")).getText();
    Assert.assertEquals("Successfully created your new hike - you should now be able to view it in 'Your Hikes' or find it using the search function.", alertMessage);

    // Verify that the insert method was called exactly once with any Hike object
    //verify(mockFacade, times(1)).insert(any(Hike.class));
  }
}
